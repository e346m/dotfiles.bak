[[plugins]]
repo = 'Shougo/denite.nvim'
if = 'has("python3")'

[[plugins]]
repo = 'Shougo/unite.vim'

[[plugins]]
repo = 'monkoose/boa.vim'

[[plugins]]
repo = 'AlessandroYorba/Arcadia'

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
let g:quickrun_config = {
\   'tex': {
\       'command': 'latexmk',
\       'exec': ['%c -gg -pdfdvi %s', 'open -F %s:r.pdf']
\   },
\}
'''
[[plugins]]
repo = 'lervag/vimtex'

[[plugins]]
repo = 'Shougo/deoplete.nvim'

[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
  autocmd FileType defx call s:defx_my_settings()
  function! s:defx_my_settings() abort
   " Define mappings
    nnoremap <silent><buffer><expr> <CR>
   \ defx#do_action('open')
    nnoremap <silent><buffer><expr> c
   \ defx#do_action('copy')
    nnoremap <silent><buffer><expr> m
   \ defx#do_action('move')
    nnoremap <silent><buffer><expr> p
   \ defx#do_action('paste')
    nnoremap <silent><buffer><expr> l
   \ defx#do_action('open')
    nnoremap <silent><buffer><expr> E
   \ defx#do_action('open', 'vsplit')
    nnoremap <silent><buffer><expr> P
   \ defx#do_action('open', 'pedit')
    nnoremap <silent><buffer><expr> K
   \ defx#do_action('new_directory')
    nnoremap <silent><buffer><expr> N
   \ defx#do_action('new_file')
    nnoremap <silent><buffer><expr> d
   \ defx#do_action('remove')
    nnoremap <silent><buffer><expr> r
   \ defx#do_action('rename')
    nnoremap <silent><buffer><expr> x
   \ defx#do_action('execute_system')
    nnoremap <silent><buffer><expr> yy
   \ defx#do_action('yank_path')
    nnoremap <silent><buffer><expr> .
   \ defx#do_action('toggle_ignored_files')
    nnoremap <silent><buffer><expr> h
   \ defx#do_action('cd', ['..'])
    nnoremap <silent><buffer><expr> ~
   \ defx#do_action('cd')
    nnoremap <silent><buffer><expr> q
   \ defx#do_action('quit')
    nnoremap <silent><buffer><expr> <Space>
   \ defx#do_action('toggle_select') . 'j'
    nnoremap <silent><buffer><expr> *
   \ defx#do_action('toggle_select_all')
    nnoremap <silent><buffer><expr> j
   \ line('.') == line('$') ? 'gg' : 'j'
    nnoremap <silent><buffer><expr> k
   \ line('.') == 1 ? 'G' : 'k'
    nnoremap <silent><buffer><expr> <C-l>
   \ defx#do_action('redraw')
    nnoremap <silent><buffer><expr> <C-g>
   \ defx#do_action('print')
    nnoremap <silent><buffer><expr> cd
   \ defx#do_action('change_vim_cwd')
  endfunction
'''

# [[plugins]]
# repo = 'neomake/neomake'
# hoo_add = '''
#   autocmd! BufWritePost,BufEnter * Neomake
#   let g:neomake_markdown_enabled_makers = []
#   let g:neomake_rust_cargo_command = ['test', '--no-run']
#
#   " Configure a nice credo setup, courtesy https://github.com/neomake/neomake/pull/300
#   function! NeomakeCredoErrorType(entry)
#       if a:entry.type ==# 'F'      " Refactoring opportunities
#           let type = 'W'
#       elseif a:entry.type ==# 'D'  " Software design suggestions
#           let type = 'I'
#       elseif a:entry.type ==# 'W'  " Warnings
#           let type = 'W'
#       elseif a:entry.type ==# 'R'  " Readability suggestions
#           let type = 'I'
#       elseif a:entry.type ==# 'C'  " Convention violation
#           let type = 'W'
#       else
#           let type = 'M'           " Everything else is a message
#       endif
#       let a:entry.type = type
#   endfunction
#   let g:neomake_elixir_enabled_makers = ['mycredo']
#   let g:neomake_elixir_mycredo_maker = {
#         \ 'exe': 'mix',
#         \ 'args': ['credo', 'list', '%:p', '--format=oneline'],
#         \ 'errorformat': '[%t] %. %f:%l:%c %m,[%t] %. %f:%l %m',
#         \ 'postprocess': function('NeomakeCredoErrorType')
#         \ }
#   let g:neomake_error_sign = {'text': '>>', 'texthl': 'ErrorMsg'}
#   let g:neomake_warning_sign = {'text': '>>',  'texthl': 'Todo'}
# '''

[[plugins]]
repo = 'sbdchd/neoformat'
hook_add = '''
  autocmd BufWritePre *.js Neoformat
  let g:neoformat_try_formatprg = 1
'''

[[plugins]]
repo = 'epilande/neomake-local-eslint.vim'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/neosnippet'
hook_source = '''
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif
'''
on_i  = 1
on_ft = ['snippet']
depends = ['neosnippet-snippets']

[[plugins]]
repo = 'mhartington/nvim-typescript'
hook_add = 'let g:deoplete#enable_at_startup = 1'

[[plugins]]
repo = 'HerringtonDarkholme/yats.vim'

[[plugins]]
repo = 'sheerun/vim-polyglot'

[[plugins]]
repo = 'c-brenn/phoenix.vim'

[[plugins]]
repo =  'tpope/vim-projectionist'

[[plugins]]
repo = 'ludovicchabant/vim-gutentags'
hook_add = 'let g:gutentags_cache_dir = "~/.tags_cache"'

[[plugins]]
repo = 'Shougo/vinarise.vim'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
hook_add = '''
    let g:fzf_buffers_jump = 1
    command! -bang -nargs=* Rg
      \ call fzf#vim#grep(
      \   'rg --line-number --no-heading '.shellescape(<q-args>), 0,
      \   fzf#vim#with_preview({'options': '--reverse --delimiter : --nth 3..'}, 'down:40%:wrap'))
'''

[[plugins]]
repo = 'kristijanhusak/defx-icons'
hook_source = '''
  let g:defx_icons_enable_syntax_highlight = 1
  let g:defx_icons_column_length = 2
  let g:defx_icons_directory_icon = ''
  let g:defx_icons_mark_icon = '*'
  let g:defx_icons_parent_icon = ''
  let g:defx_icons_default_icon = ''
  let g:defx_icons_directory_symlink_icon = ''

  let g:defx_icons_root_opened_tree_icon = ''
  let g:defx_icons_nested_opened_tree_icon = ''
  let g:defx_icons_nested_closed_tree_icon = ''
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'
